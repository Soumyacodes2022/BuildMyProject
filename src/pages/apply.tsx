import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { useEffect, useState,useContext } from 'react'
import Link from 'next/link'
import app from "../firebase"
import {collection,doc,setDoc,getDocs,getFirestore,addDoc, getDoc, Timestamp, serverTimestamp} from "firebase/firestore"
import { async } from '@firebase/util'
import { getAuth, onAuthStateChanged ,createUserWithEmailAndPassword,GoogleAuthProvider,signInWithPopup} from "firebase/auth";
import { getStorage ,ref as storageRefer,uploadBytes,getDownloadURL} from "firebase/storage";
import { useRouter } from 'next/router'
import { useSelector } from 'react-redux'
import { UserContext } from '../context/context';
import { getDatabase ,set,ref as databaseRef} from 'firebase/database'

export default function ProposalSend({projectId,Uid,clientid}) {
      
   const db=getFirestore(app)
   const storage = getStorage(app);
   const [name, setName] = useState("");
   const [email, setEmail] = useState("");
   const proRef=collection(db,"messages");
   const [ uid,setUid]=useState('')
   const realtimedb = getDatabase(app)
   const [proposal, setProposal] = useState("");
   const [link, setLink] = useState("");
   const [resume, setResume] = useState(null);
   const user = useContext(UserContext)
   const loggedin = useSelector((state:any)=>state.login)
   const router =useRouter()
   const [ downloadUrl, setDownloadURL] = useState('')
   function checkUser(){
    if(!user || !(loggedin.login === 'User') ){
      router.push({pathname:'/useregister'})   
   }else{
      setUid(user.uid)
   }
  }

  useEffect(()=>{
    if(user){
      checkUser()
    }
  })
  
   const handleSubmit = (e) => {
     e.preventDefault();
     // Do something with form data
    set(databaseRef(realtimedb,`/messages/${clientid}/${uid}/${projectId}/1`),{
      users: [clientid, uid].sort(),
      sender:uid,
      recipient: clientid,
      projectId:projectId,
      message:`Hi My Name is ${name} email ${email} 
      ${proposal} .My Url link ${link} .My Resume link ${downloadUrl}`,
      timestamp: serverTimestamp(),
    }
    ).then((res)=>{router.push({pathname:'/chatscreen',query:{
      clientid:clientid,
      projectId:projectId,
    }})}).catch(err=>alert(err))

    //  addDoc(proRef,{
          
    //   users: [clientid, uid].sort(),
    //   sender:uid,
    //   recipient: clientid,
    //   projectId:projectId,
    //   message:`Hi My Name is ${name} email ${email} 
    //   ${proposal} .My Url link ${link} .My Resume link ${downloadUrl}`,
    //   timestamp: serverTimestamp(),
    // }).then((res)=>{
    //     router.push({pathname:'/userdashboard'})
    // }).catch(err=>alert(err));
      
   };
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
      e.preventDefault()
      const storageRef = storageRefer(storage,`resumes/${e.target.files[0].name}`);
      setResume(e.target.files[0])
      uploadBytes(storageRef, e.target.files[0]).then((snapshot) => {
        console.log('Uploaded a blob or file!');
        getDownloadURL(storageRefer(storage,`resumes/${e.target.files[0].name}`)).then((url)=>{
            setDownloadURL(url)
        })
      }).catch(err=>alert(err));
    console.log(downloadUrl)
   }
   
  //  const handleSubmitProposal=(e)=>{
  //   e.preventDefault()
  //   const proRef=collection(db,"Proposal");
  //   uploadBytes(storageRef, resume).then((snapshot) => {
  //    console.log('Uploaded a blob or file!');
  //    getDownloadURL(ref(storage,`resumes/${resume}`)).then((url)=>{
  //        addDoc(proRef,{
  //           projectid:projectId,
  //           uid:Uid,
  //           name:name,
  //           email:email,
  //           proposal:proposal,
  //           link:link,
  //           resume:url
  //        }).then((res)=>{
  //         router.push({pathname:'/userdashboard',query:{uid:Uid}})
  //        }).catch(err=>alert(err));
  //    })
  //  }).catch(err=>alert(err));
  //  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
     
      <div className="flex justify-center min-h-screen ">
  <form
    className="flex flex-col max-w-md w-full p-6 bg-gray-800 rounded-lg shadow-lg"
    onSubmit={handleSubmit}
  >
    <label htmlFor="name" className="text-lg font-semibold text-violet-400 mb-2">
      Name
    </label>
    <input
      type="text"
      id="name"
      name="name"
      value={name}
      onChange={(e) => setName(e.target.value)}
      className="p-3 mb-4 rounded-md bg-gray-700 text-white focus:ring-2 focus:ring-violet-500 outline-none"
      required
    />

    <label htmlFor="email" className="text-lg font-semibold text-violet-400 mb-2">
      Contact Email
    </label>
    <input
      type="email"
      id="email"
      name="email"
      value={email}
      onChange={(e) => setEmail(e.target.value)}
      className="p-3 mb-4 rounded-md bg-gray-700 text-white focus:ring-2 focus:ring-violet-500 outline-none"
      required
    />

    <label htmlFor="proposal" className="text-lg font-semibold text-violet-400 mb-2">
      Proposal
    </label>
    <textarea
      id="proposal"
      name="proposal"
      value={proposal}
      onChange={(e) => setProposal(e.target.value)}
      className="p-3 mb-4 rounded-md bg-gray-700 text-white focus:ring-2 focus:ring-violet-500 outline-none resize-vertical"
      required
      
    />

    <label htmlFor="link" className="text-lg font-semibold text-violet-400 mb-2">
      Relevant Link
    </label>
    <input
      type="url"
      id="link"
      name="link"
      value={link}
      onChange={(e) => setLink(e.target.value)}
      className="p-3 mb-4 rounded-md bg-gray-700 text-white focus:ring-2 focus:ring-violet-500 outline-none"
      required
    />

    <label htmlFor="resume" className="text-lg font-semibold text-violet-400 mb-2">
      Resume Upload
    </label>
    <input
      type="file"
      id="resume"
      name="resume"
      onChange={(e) => handleFileUpload(e)}
      className="p-3 mb-4 rounded-md bg-gray-700 text-white focus:ring-2 focus:ring-violet-500 outline-none"
      required
    />

    <button
      type="submit"
      className="p-3 rounded-md bg-violet-700 text-white font-bold hover:bg-violet-800 transition-colors"
    >
      Submit
    </button>
  </form>
</div>

    </>
  )
}
export async function getServerSideProps({ query}) {
  const projectId = query.proid;
  const clientid=query.clientid;
    return {
      props: {
        projectId,
         clientid
      }
    }
  }