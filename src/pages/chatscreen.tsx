import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { useEffect, useContext, useState, use } from 'react'

import app from "../firebase"
import {collection,doc,setDoc,getDocs,getFirestore,addDoc, getDoc,query,where,orderBy, serverTimestamp} from "firebase/firestore"
import { async } from '@firebase/util'
import { onSnapshot } from 'firebase/firestore'
import {UserContext} from '../context/context'
import { getDatabase, ref, onValue,set } from "firebase/database";
//import { getAuth, onAuthStateChanged ,createUserWithEmailAndPassword,GoogleAuthProvider,signInWithPopup} from "firebase/auth";
import {useSelector,useDispatch} from 'react-redux';
import Link from 'next/link'


 
export default function ChatScreen({clientId,projectId}) {
    const db=getFirestore(app);
    const [message, setMessage] = useState('');
    const [messages, setMessages] = useState([]);
    const [clientName,setC]=useState('')
    const [ uid2,setU2]=useState('')
    const [uid1,setU1]=useState('')
    const [userName,setU]=useState('')
    const realtimedb = getDatabase(app);
    const messagesRef = ref(realtimedb, 'messages');
    const [messageLength ,setMessageLength]= useState(0)
    const loggedin = useSelector((state:any)=>state.login)
    const user = useContext(UserContext);
    const getUser = async () => {
      const uid1 = user.uid;
      const uid2 = clientId;
      setU1(uid1)
      setU2(uid2)
      const messagesRef = ref(realtimedb,`/messages/${clientId}/${user.uid}/${projectId}`);
      onValue(messagesRef, (snapshot) => {
        const data = snapshot.val();
        if(data){
          setMessageLength(Object.keys(data).length)
          console.log(data)
          setMessages(data)
        }
      });
    }
    useEffect(() => {
     if(user && clientId){
       getUser()
     }
    
    }, [user,clientId]);
  
    const sendMessage = () => {
      const messagesRef = ref(realtimedb,`/messages/${clientId}/${user.uid}/${projectId}/${messageLength+1}`);
      set(messagesRef, {
        
          users: [uid2,uid1].sort(),
          sender:uid1,
          recipient: clientId,
          projectId:projectId,
          message: message,
          timestamp: serverTimestamp(),
        
      }
      ).then(() => {
        console.log('Message sent successfully');
        setMessage('');
      }).catch((error) => {
        console.error('Error sending message:', error);
      });
    };
   

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
     
      </Head>

<div style={{ 
  display: 'flex', 
  flexDirection: 'column', 
  height: '100vh', 
  justifyContent: 'space-between' 
}}>
  <div style={{ 
    padding: '1rem', 
    backgroundColor: '#f0f0f0', 
    borderBottom: '1px solid #ccc' 
  }}>
    <h2 style={{ margin: 0 }}>Chatting with {clientName} and </h2>
  </div>
  <ul style={{ 
    padding: 0, 
    margin: 0, 
    overflowY: 'auto', 
    flexGrow: 1 
  }}>
    {messages.map((msg, i) => (
      <li key={i} style={{ 
        listStyleType: 'none', 
        padding: '0.5rem 1rem', 
      
      }}>
       
        <strong
        ></strong>  
        <div  style={{background:'#E6F0F3',padding:'20px',borderRadius:'10px'}}   >
          {msg.message}
        </div>
      </li>
    ))}
  </ul>
  <div style={{ 
    display: 'flex', 
    alignItems: 'center', 
    padding: '1rem', 
    borderTop: '1px solid #ccc' 
  }}>
    <input type="text" value={message} onChange={e => setMessage(e.target.value)} style={{ 
      flex: 1, 
      marginRight: '0.5rem', 
      padding: '0.5rem', 
      borderRadius: '9999px', 
      border: '1px solid #ccc' 
    }} />
    <button onClick={sendMessage} style={{ 
      backgroundColor: '#4CAF50', 
      color: 'white', 
      border: 'none', 
      padding: '0.5rem 1rem', 
      borderRadius: '9999px', 
      cursor: 'pointer' 
    }}>Send</button>
  </div>
</div>
    </>
  )
}






export async function getServerSideProps({ query}) {
  const clientId = query.clientid;
  const projectId = query.projectId;
  

    return {
      props: {
        clientId,
        projectId
      }
    }
  }