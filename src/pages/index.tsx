import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import {  useState ,useEffect, ReactElement} from 'react'
import app from "../firebase"
import {collection,doc,setDoc,getDocs,getFirestore,addDoc,getDoc, DocumentData} from "firebase/firestore"
import { async } from '@firebase/util'
import { getAuth, onAuthStateChanged ,createUserWithEmailAndPassword,GoogleAuthProvider,signInWithPopup,signInWithEmailAndPassword, OAuthCredential} from "firebase/auth";
import { useRouter } from 'next/router'
import React from 'react';
import Page from 'next';
import  AccountBox  from '@mui/icons-material/AccountBox'
import { PersonAdd } from '@mui/icons-material'
import ListSubheader from '@mui/material/ListSubheader'
import ListIcon from '@mui/icons-material/List';
import Drawer from '@mui/material/Drawer';
import Box from '@mui/material/Box';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import Divider from '@mui/material/Divider';
import Avatar from '@mui/material/Avatar';
import DashboardIcon from '@mui/icons-material/Dashboard';
import SettingsIcon from '@mui/icons-material/Settings';
import Link from 'next/link'
import Script from 'next/script'
import Card from '../components/projectcard'
import DarkModeLayout from '../components/layout'
let arrayofprojects:{id:any,data:any}[]=[];

export default function Home({arrayofprojects, user}):ReactElement<any,any> {
    const [isSignup,setSignUp]=useState(false);
    const [isOpen,setOpen]=useState(false);
    const router=useRouter()
    const [button,setButton]=useState('signup')
    const [id,setId]=useState('')
    const [searchQuery, setSearchQuery] = useState('');
    const [isLoggin,setIsLoggedin]=useState(false)
    const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);
    const [filteredProjects, setFilteredProjects] = useState([]);
   
    useEffect(() => {
      if (searchQuery.trim() === '') {
        setFilteredProjects(arrayofprojects);
      } else {
        const filtered = arrayofprojects.filter((project) =>
          project.data.Title.toLowerCase().includes(searchQuery.toLowerCase()) ||
          project.data.Category.toLowerCase().includes(searchQuery.toLowerCase())
        );
        setFilteredProjects(filtered);
      }
    }, [searchQuery, arrayofprojects]);


    const handleToggleDrawer = () => {
      setIsDrawerOpen(!isDrawerOpen);
    };
  

    const handleInputChange = (event):void => {
      setSearchQuery(event.target.value);
    }
  
    const handleSearch = (event) => {
      event.preventDefault();
      console.log(`Search Query: ${searchQuery}`);
      // Perform search logic here
    }
  
  return (
    <>
      <Head>
        <title>BuildMyProject</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
   
  <div className="container mx-auto h-dvh">  
    <div className="flex items-center  pt-3 gap-4 justify-center" >
  <ListIcon
    className="w-8 h-8 cursor-pointer text-violet-black"
    onClick={handleToggleDrawer}
  />
  <input
    type="text"
    placeholder="Search..."
    value={searchQuery}
    onChange={handleInputChange}
    className="w-1/2  p-2 rounded-md border-none w-full h-10 shadow-sm bg-gray-900 focus:bg-black text-gray-700 text-base focus:outline-none"
  />
  <button onClick={handleSearch} className="px-4 py-2 rounded-md bg-violet-900 text-white font-bold">Search</button>
  <NavigationDrawer isOpen={isDrawerOpen} onClose={handleToggleDrawer} isLoggin={isLoggin} uid={user} />
</div>


      <h3 className="text-center">All Projects that are available currently</h3>
      
     {filteredProjects.map((item)=>{
      return(
     <Card item={item} user={user}></Card>
      )
  
     })}
    

      </div>
    
    </>
  )
}

const NavigationDrawer = ({ isOpen, onClose,isLoggin,uid }) => {
  const router=useRouter()
  return (
    <Drawer anchor="left" open={isOpen} onClose={onClose}>
      
      <Box sx={{ width: 250 }} role="presentation" onClick={onClose} onKeyDown={onClose}>
        <List>
          <ListItem>
            <Avatar />
          </ListItem>
          <ListItem>
            <ListItemText primary="John Doe" />
          </ListItem>
          <Divider />
          <ListSubheader>Navigation</ListSubheader>
          <ListItem button>
            <ListItemIcon>
              <DashboardIcon />
            </ListItemIcon>
            <ListItemText primary="Dashboard" onClick={()=>{
              router.push({pathname:'/userdashboard',query:{uid:uid.uid}})
            }} />
          </ListItem>
          <ListItem button>
            <ListItemIcon>
              <SettingsIcon />
            </ListItemIcon>
            <ListItemText primary="Settings" />
          </ListItem>
          <Divider />
          <ListSubheader>Account</ListSubheader>
          <ListItem button>
            <ListItemIcon>
              <AccountBox/>
            </ListItemIcon>
            {/* <ListItemText primary="Sign in/Sing Up"   /> */}
          <Link href='/clientregister'>Client Sign In</Link>
          </ListItem>
          <ListItem button>
            <ListItemIcon>
              <PersonAdd/>
            </ListItemIcon>
            <Link href='/useregister'>Freelancer Sign In</Link>
          </ListItem>
        </List>
      </Box>
    </Drawer>
  );
};


export async function getServerSideProps(context:any):Promise<any> {
  const {uid}=context.query
  const db = getFirestore(app);
  let user:DocumentData | null = null;
  if(uid){
    const userDocRef = doc(db, 'Users', uid);
    const userDocSnapshot = await getDoc(userDocRef);
     user = userDocSnapshot.data();
  }
 
 const ref=collection(db,"AllProjects");
 const docRef= await getDocs(ref);
 docRef.forEach((doc:DocumentData) => { 
  let id:any=doc.id;
  let data:any=doc.data()
  arrayofprojects.push({id:id ,data:data})
});

  return {
    props: {
      arrayofprojects ,
      user:user?user:'none',
    },
  };
}