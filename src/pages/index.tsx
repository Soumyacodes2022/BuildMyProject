import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import {  useState ,useEffect, ReactElement} from 'react'
import app from "../firebase"
import {collection,doc,setDoc,getDocs,getFirestore,addDoc,getDoc, DocumentData} from "firebase/firestore"
import { async } from '@firebase/util'
import { getAuth, onAuthStateChanged ,createUserWithEmailAndPassword,GoogleAuthProvider,signInWithPopup,signInWithEmailAndPassword, OAuthCredential} from "firebase/auth";
import { useRouter } from 'next/router'
import React from 'react';
import Page from 'next';
import  AccountBox  from '@mui/icons-material/AccountBox'
import { PersonAdd } from '@mui/icons-material'
import ListSubheader from '@mui/material/ListSubheader'
import ListIcon from '@mui/icons-material/List';
import NavigationDrawer from '../components/navigation'
import Link from 'next/link'
import styles from '../styles/Home.module.css'
import Filter from '../components/filter'
import Script from 'next/script'
import Card from '../components/projectcard'
import DarkModeLayout from '../components/layout'
import {useSelector,useDispatch} from 'react-redux';

export default function Home({ arrayofprojects, user }: { arrayofprojects: { id: any, data: any }[], user: any }): ReactElement<any, any> {
  const [isSignup, setSignUp] = useState(false);
    const [isOpen,setOpen]=useState(false);
    const router=useRouter()
    const [button,setButton]=useState('signup')
    const [id,setId]=useState('')
    const [mincost,setminCost]=useState(0)
    const [maxcost,setmaxCost]=useState(0)
    const [searchQuery, setSearchQuery] = useState('');
    const [isLoggin,setIsLoggedin]=useState(false)
    const [categories,setCategories]=useState([])
    const [selectedCategories,setSelectedCategories]=useState([])
    const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);
    const [filteredProjects, setFilteredProjects] = useState([]);
    const loggedin = useSelector((state:any)=>state.login)
    console.log(loggedin)
   const retriveCategories = ():void=>{
    let catarr:string[]=[]
    arrayofprojects.map((item)=>{
      if(!catarr.includes(item.data.Category)){
        catarr.push(item.data.Category)
      }
    })
    setCategories(catarr)
   }

    useEffect(() => {
      retriveCategories()
      if (searchQuery.trim() === '') {
        if(mincost===0 && maxcost===0 && selectedCategories.length===0){
       
          setFilteredProjects(arrayofprojects);
        }else{
          const filtered = arrayofprojects.filter((project) =>
          (project.data.Budget >= mincost && project.data.Budget <= maxcost) ||
          (selectedCategories.includes(project.data.Category))
        );  
        setFilteredProjects(filtered);
        }
      } else {
      
        const filtered = arrayofprojects.filter((project) =>
          project.data.Title.toLowerCase().includes(searchQuery.toLowerCase()) ||
          project.data.Category.toLowerCase().includes(searchQuery.toLowerCase()) 
        );
        console.log(filtered);
        setFilteredProjects(filtered);
      }
    }, [searchQuery, arrayofprojects, mincost, maxcost,selectedCategories]);


    const handleToggleDrawer = () => {
      setIsDrawerOpen(!isDrawerOpen);
    };
  

    const handleInputChange = (event):void => {
      setSearchQuery(event.target.value);
    }
  
    const handleSearch = (event) => {
      event.preventDefault();
      console.log(`Search Query: ${searchQuery}`);
      // Perform search logic here
    }
  
  return (
    <>
      <Head>
        <title>BuildMyProject</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
   
      <div className="mx-auto lg:h-screen sm:min-h-screen  p-4">
      <div className="flex items-center gap-4 justify-around pt-3">
        <ListIcon
          className="w-8 h-8 cursor-pointer text-violet-600"
          onClick={handleToggleDrawer}
        />
        <input
          type="text"
          placeholder="Search..."
          value={searchQuery}
          onChange={handleInputChange}
          className="flex-1 p-2 rounded-md border-none shadow-sm bg-white focus:bg-gray-200 text-gray-900 text-base focus:outline-none"
        />
        <button
          onClick={handleSearch}
          className="px-4 py-2 rounded-md bg-violet-600 hover:bg-violet-700 text-white font-bold transition-colors"
        >
          Search
        </button>
        <NavigationDrawer
          isOpen={isDrawerOpen}
          onClose={handleToggleDrawer}
          isLoggin={isLoggin}
          uid={user}
          login={loggedin}
        />
      </div>

      <div className="lg:grid grid-cols-4 mt-10 gap-10">
        <div className="col-span-1 hidden lg:block">
          <Filter
            mincost={mincost}
            maxcost={maxcost}
            setMax={setmaxCost}
            setMin={setminCost}
            categories={categories}
            selectedCategories={selectedCategories}
            setSelectedCategories={setSelectedCategories}
          />
        </div>
        <div className="col-span-3">
          {filteredProjects.map((item) => (
            <Card key={item.id} item={item} user={user} />
          ))}
        </div>
      </div>
    </div>
    </>
  )
}



export async function getServerSideProps(context:any):Promise<any> {
  let arrayofprojects: { id: any, data: any }[] = [];
  const {uid}=context.query
  const db = getFirestore(app);
  let user:DocumentData | null = null;
  if(uid){
    const userDocRef = doc(db, 'Users', uid);
    const userDocSnapshot = await getDoc(userDocRef);
     user = userDocSnapshot.data();
  }
 
 const ref=collection(db,"AllProjects");
 const docRef= await getDocs(ref);
 docRef.forEach((doc:DocumentData) => { 
  let id:any=doc.id;
  let data:any=doc.data()
  arrayofprojects.push({id:id ,data:data})
});

  return {
    props: {
      arrayofprojects ,
      user:user?user:'none',
    },
  };
}