import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { useEffect, useParams, useState } from 'react'

import app from "../firebase"
import {collection,doc,setDoc,getDocs,getFirestore,addDoc, getDoc,query,where,orderBy, serverTimestamp} from "firebase/firestore"
import { async } from '@firebase/util'
import { onSnapshot } from 'firebase/firestore'

//import { getAuth, onAuthStateChanged ,createUserWithEmailAndPassword,GoogleAuthProvider,signInWithPopup} from "firebase/auth";
import { getStorage ,ref,uploadBytes,getDownloadURL} from "firebase/storage";
import Link from 'next/link'

 
export default function ChatScreen({clientId,UserId}) {
  const db=getFirestore(app);
    const [message, setMessage] = useState('');
    const [messages, setMessages] = useState([]);
    const [clientName,setC]=useState('')
    const [userName,setU]=useState('')
    console.log(clientId +UserId)
    useEffect(() => {
 
      const userref=doc(db,"Users",UserId);
      const clientref=doc(db,"Users",clientId);
  getDoc(userref).then((res)=>{
    setU(res.data().name)
  })
  getDoc(clientref).then((res)=>{
    setC(res.data().name)
  })

      const messagesQuery = query(
        collection(db, 'messages'),
        where('users', '==', [clientId, UserId]?.sort()),
        orderBy('timestamp')
      );
      
      // Set up onSnapshot listener
      onSnapshot(messagesQuery, querySnapshot => {
        const newMessages = [];
        querySnapshot.forEach(doc => {
          console.log(doc.data())
          newMessages.push(doc.data());
        });
        setMessages(newMessages);
      });
    }, [clientId, UserId]);
  
    const sendMessage = () => {
      const messRef=collection(db,"messages");
      addDoc(messRef,{
        users: [clientId, UserId].sort(),
        sender: clientId,
        recipient: UserId,
        message,
        timestamp: serverTimestamp(),
      })
      setMessage('');
    };
   

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
     
      </Head>
     {/* <div>
     <div>
      <h2>Chatting with {clientName}</h2>
      <ul>
        {messages.map((msg, i) => (
          <li key={i}>
            <strong>{msg.sender === UserId ? 'You' : clientId}:</strong> {msg.message}
          </li>
        ))}
      </ul>
      <div>
        <input type="text" value={message} onChange={e => setMessage(e.target.value)} />
        <button onClick={sendMessage}>Send</button>
      </div>
    </div>
</div> */}
<div style={{ 
  display: 'flex', 
  flexDirection: 'column', 
  height: '100vh', 
  justifyContent: 'space-between' 
}}>
  <div style={{ 
    padding: '1rem', 
    backgroundColor: '#f0f0f0', 
    borderBottom: '1px solid #ccc' 
  }}>
    <h2 style={{ margin: 0 }}>Chatting with {clientName}</h2>
  </div>
  <ul style={{ 
    padding: 0, 
    margin: 0, 
    overflowY: 'auto', 
    flexGrow: 1 
  }}>
    {messages.map((msg, i) => (
      <li key={i} style={{ 
        listStyleType: 'none', 
        padding: '0.5rem 1rem', 
       
        textAlign: msg.sender === UserId ? 'right' : 'left' 
      }}>
       
        <strong
        
        >{msg.sender === UserId ? 'You' : userName}:</strong>  <div  style={{background:'#E6F0F3',padding:'20px',borderRadius:'10px'}}   >{msg.message}
        </div>
      </li>
    ))}
  </ul>
  <div style={{ 
    display: 'flex', 
    alignItems: 'center', 
    padding: '1rem', 
    borderTop: '1px solid #ccc' 
  }}>
   <Link href="https://paytm.me/e6WB-zQ">Pay to Student</Link>
    <input type="text" value={message} onChange={e => setMessage(e.target.value)} style={{ 
      flex: 1, 
      marginRight: '0.5rem', 
      padding: '0.5rem', 
      borderRadius: '9999px', 
      border: '1px solid #ccc' 
    }} />
    <button onClick={sendMessage} style={{ 
      backgroundColor: '#4CAF50', 
      color: 'white', 
      border: 'none', 
      padding: '0.5rem 1rem', 
      borderRadius: '9999px', 
      cursor: 'pointer' 
    }}>Send</button>
  </div>
</div>
    </>
  )
}






export async function getServerSideProps({ query}) {
  const clientId = query.clienttId;
  const UserId = query.Userid;
    return {
      props: {
        clientId,
       UserId
      }
    }
  }