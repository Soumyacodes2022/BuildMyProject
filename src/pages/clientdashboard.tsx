import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { use, useEffect, useState } from 'react'

import app from "../firebase"
import {collection,doc,setDoc,getDocs,getFirestore,addDoc, getDoc,query,where,orderBy, serverTimestamp} from "firebase/firestore"
import { async } from '@firebase/util'
import { onSnapshot } from 'firebase/firestore'
//import { getAuth, onAuthStateChanged ,createUserWithEmailAndPassword,GoogleAuthProvider,signInWithPopup} from "firebase/auth";
import { getStorage ,ref,uploadBytes,getDownloadURL} from "firebase/storage";
import React from 'react';
import { useContext} from 'react'
import Script from 'next/script'
import { useRouter  } from 'next/router'
import { getAuth } from 'firebase/auth';
import { UserContext } from '../context/context';
import { clientloggedin } from '../store/store'
import { useDispatch } from 'react-redux'
export default function ClientDashBoard() {
 const router=useRouter()
 const user=useContext(UserContext)
const [projects,setProjects]=useState([])
const [clientId,setClient]=useState('')
const dispatch=useDispatch()
async function getProjects(){
  let clientId=user.uid
  setClient(clientId)
  const db=getFirestore(app);
  const docRef=collection(db,"AllProjects")
  const allproposals=collection(db,"Proposals");
  let projects=[]
  let proposals=[]
  const q = query(docRef, where("uid", "==", clientId));  
  const snapShot=await getDocs(q)
  snapShot.forEach((item)=>{
    projects.push({id:item.id,data:item.data()})
  })
  setProjects(projects) 
}


useEffect(()=>{
  if(user){
    getProjects()
    dispatch(clientloggedin())
  }
},[user])


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico"/>
      </Head>
     
      <div className="min-h-screen text-white p-6">
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
        <div
          className="bg-blue-600 p-4 rounded-lg shadow-lg cursor-pointer hover:bg-blue-700 transition-colors"
          onClick={() => {
            router.push({ pathname: '/allchats', query: { UserId: clientId } });
          }}
        >
          <h3 className="text-xl font-semibold">All Chats</h3>
        </div>
        <div className="bg-green-600 p-4 rounded-lg shadow-lg">
          <h3 className="text-xl font-semibold">Total Spent</h3>
          <p className="text-lg mt-2">â‚¹0</p>
        </div>
        <div className="bg-yellow-600 p-4 rounded-lg shadow-lg">
          <button
            className="bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded-md transition-colors"
            onClick={() => {
              router.push({ pathname: '/postproject', query: { clientId: clientId } });
            }}
          >
            Post New Project
          </button>
        </div>
      </div>

      <div>
        <h3 className="text-2xl font-semibold mb-4">All Jobs Posted</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {projects.map((item) => (
            <div
              className="bg-gray-800 p-4 rounded-lg shadow-lg cursor-pointer hover:bg-gray-700 transition-colors"
              onClick={() => {
                router.push({
                  pathname: '/allproposals',
                  query: { clientId: clientId, proid: item.id, projectname: item.data.Title },
                });
              }}
              key={item.id}
            >
              <h2 className="text-xl font-semibold text-violet-400 mb-2">{item.data.Title}</h2>
            </div>
          ))}
        </div>
      </div>
    </div>
    </>
  )
}
