import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { useEffect, useParams, useState } from 'react'

import app from "../firebase"
import {collection,doc,setDoc,getDocs,getFirestore,addDoc, getDoc,query,where,orderBy} from "firebase/firestore"
import { async } from '@firebase/util'
import { getAuth, onAuthStateChanged ,createUserWithEmailAndPassword,GoogleAuthProvider,signInWithPopup} from "firebase/auth";
import { getStorage ,ref,uploadBytes,getDownloadURL} from "firebase/storage";

export default function ChatScreen({clientId,recepentId}) {
    const [message, setMessage] = useState('');
    const [messages, setMessages] = useState([]);
  
    useEffect(() => {
      // Subscribe to messages collection for this chat
      const messagesQuery = query(
        collection(db, 'messages'),
        where('users', '==', [currentUser.uid, recipientUser.uid].sort()),
        orderBy('timestamp')
      );
      
      // Set up onSnapshot listener
      onSnapshot(messagesQuery, querySnapshot => {
        const newMessages = [];
        querySnapshot.forEach(doc => {
          newMessages.push(doc.data());
        });
        setMessages(newMessages);
      });
    }, [currentUser.uid, recipientUser.uid]);
  
    const sendMessage = () => {
      db.collection('messages').add({
        users: [clientId.uid, recipientUser.uid].sort(),
        sender: currentUser.uid,
        recipient: recipientUser.uid,
        message,
        timestamp: firebase.firestore.FieldValue.serverTimestamp(),
      });
      setMessage('');
    };
   

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
     <div>
     <div>
      <h2>Chatting with {recipientUser.displayName}</h2>
      <ul>
        {messages.map((msg, i) => (
          <li key={i}>
            <strong>{msg.sender === currentUser.uid ? 'You' : recipientUser.displayName}:</strong> {msg.message}
          </li>
        ))}
      </ul>
      <div>
        <input type="text" value={message} onChange={e => setMessage(e.target.value)} />
        <button onClick={sendMessage}>Send</button>
      </div>
    </div>


</div>
    </>
  )
}
export async function getServerSideProps({ query}) {
  const clienttId = query.clientid;
  const Userid = query.clientid;
    
   //const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`)
   
//   getDoc(docRef).then()
    return {
      props: {
        projectId,
        Uid
      }
    }
  }