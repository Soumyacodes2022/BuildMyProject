import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import { use, useState } from 'react'
import styles from '@/styles/Home.module.css'
import app from "../firebase"
import {collection,doc,setDoc,getDocs,getFirestore,addDoc} from "firebase/firestore"
import { async } from '@firebase/util'
import { getAuth, onAuthStateChanged ,createUserWithEmailAndPassword,GoogleAuthProvider,signInWithPopup} from "firebase/auth";
import { useRouter } from 'next/router'


export default function Home({arrayofprojects}) {
   const [isSignup,setSignUp]=useState(false);
   const [isOpen,setOpen]=useState(false);
    const router=useRouter()
    const [button,setButton]=useState('signup')
    const [id,setId]=useState('')

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={{}}>
        <h1 style={{textAlign:'center'}}>All Projects that are available currently</h1>
     {arrayofprojects.map((item)=>{
      return(<div style={{ 
        border: '1px solid #ccc',
        borderRadius: '5px',
        padding: '10px',
        maxWidth: '200px',
        margin: '0 auto',
        textAlign:'center'

      }}>
        <h2 style={{ fontSize: '24px' }}>{item.data.Title}</h2>
        <p>{item.data.Des}</p>
        <p>{item.data.Skills}</p>
        <p>{item.data.uploadedBy}</p>
        <p>{item.data.Category}</p>
        <p>{item.data.Subcategory}</p>
        <h1 style={{color:'green'}}>rs.{item.data.Budget}</h1>
        {button==='signup'?<button style={{ 
          background: '#0070f3',
          color: 'white',
          padding: '10px',
          borderRadius: '5px',
          border: 'none',
          cursor: 'pointer',
          marginTop: '10px',
          fontWeight: 'bold',
          fontSize: '16px'
        }}  onClick={()=>{
            if(!isSignup){
              setOpen(true)
            }
        }}>Sign Up</button>:<button style={{ 
          background: '#0070f3',
          color: 'white',
          padding: '10px',
          borderRadius: '5px',
          border: 'none',
          cursor: 'pointer',
          marginTop: '10px',
          fontWeight: 'bold',
          fontSize: '16px'
        }}  onClick={()=>{
          
            router.push({pathname:'/apply',query:{proid:item.id,uid:id}})
          
        }}>Apply</button>}
        
      </div>)
  
     })}
     <RegisterPopup isOpen={isOpen} setSignUp={setSignUp} isSignup={isSignup} setOpen={setOpen} button={button} setButton={setButton} setId={setId}/>

      </div>
    </>
  )
}
const RegisterPopup = ({ isOpen, onClose ,isSignup,setSignUp,setOpen,button,setButton,setId}) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [route,setRoute]=useState('nor')
  const db=getFirestore(app)
  const provider = new GoogleAuthProvider();
  const auth = getAuth();
  // const handleSubmitSignUp = (event) => {
  //   event.preventDefault();

  //   // TODO: Add code to register the student with the provided details
  //   console.log('Name:', name);
  //   console.log('Email:', email);
  //   console.log('Password:', password);
   
  //  const docRef=collection(db,"Users");
  //  addDoc(docRef,{
  //   name:name,
  //   email:email,
  //   password:password
  //  }).then((res)=>{
  //   alert("Registration successful");
  //   setSignUp(true)
  //   setOpen(false)
  //  }).catch((err)=>{
  //   alert("Can not register some error occurred");
  //  })
    
    
  // };
  const handleLogin=(event)=>{
   // console.log("regr")
  const auth = getAuth();
  signInWithPopup(auth, provider)
    .then((result) => {
      // This gives you a Google Access Token. You can use it to access the Google API.

      const credential = GoogleAuthProvider.credentialFromResult(result);
      const token = credential.accessToken;
      // The signed-in user info.
      const user = result.user;
    console.log(user)
    const docRef=collection(db,"Users");
   addDoc(docRef,{
    name:user.displayName,
    email:user.email,
    uid:user.uid,
    pic:user.photoURL
   }).then((res)=>{
     console.log(res)
    setSignUp(true)
    setOpen(false)
    setButton('apply')
    setId(res.id)
   }).catch((err)=>{
    console.log(err)
   })
     
    }).catch((error) => {
      
      const errorCode = error.code;
      const errorMessage = error.message;
     
      const credential = GoogleAuthProvider.credentialFromError(error);
      
    });


  }
  const handleSingUpWithEmail=(event)=>{
    event.preventDefault();
    createUserWithEmailAndPassword(auth, email, password)
  .then((userCredential) => {
    // Signed in 
    const user = userCredential.user;
    // ...
   
    const docRef=collection(db,"Users");
    addDoc(docRef,{
     name:name,
     email:user.email,
     uid:user.uid,
     pic:user.photoURL
    }).then((res)=>{
     console.log(res)
     setSignUp(true)
     setOpen(false)
    }).catch((err)=>{
     console.log(err)
    })

  })
  .catch((error) => {
    const errorCode = error.code;
    const errorMessage = error.message;
    alert(errorMessage);
    // ..
  });
  }

  if (!isOpen) {
    return null;
  }

  return (
    <div style={{ 
      position: 'fixed',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%',
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }}>
     <div  style={{ 
  backgroundColor: '#F8F9FA',
  padding: '20px',
  padding:'40px',
  borderRadius: '5px',
  width: '400px',
  boxShadow: '0px 0px 10px rgba(0, 0, 0, 0.1)'
}}>
        <h2 style={{ 
    fontSize: '24px',
    marginBottom: '20px',
    textAlign: 'center',
    color: '#343A40',
    textTransform: 'uppercase'
  }}>Register Student</h2>
        <form onSubmit={handleSingUpWithEmail}>
           <div style={{ marginBottom: '10px' }}>
            <label htmlFor="name"style={{ 
        marginRight: '10px',
        display: 'block',
        color: '#343A40',
        fontSize: '16px'
      }}>Name:</label>
            <input type="text" id="name" value={name} onChange={(e) => setName(e.target.value)}  style={{ 
        width: '100%',
        padding: '10px',
        border: '1px solid #ced4da',
        borderRadius: '5px'
      }}/>
          </div> 
          <div style={{ marginBottom: '10px' }}>
            <label htmlFor="email" style={{ 
        marginRight: '10px',
        display: 'block',
        color: '#343A40',
        fontSize: '16px'
      }}>Email:</label>
            <input type="email" id="email" value={email} onChange={(e) => setEmail(e.target.value)} style={{ 
        width: '100%',
        padding: '10px',
        border: '1px solid #ced4da',
        borderRadius: '5px'
      }} />
          </div>
          <div style={{ marginBottom: '20px' }}>
            <label htmlFor="password" style={{ 
        marginRight: '10px',
        display: 'block',
        color: '#343A40',
        fontSize: '16px'
      }}>Password:</label>
            <input type="password" id="password" value={password} onChange={(e) => setPassword(e.target.value)} style={{ 
        width: '100%',
        padding: '10px',
        border: '1px solid #ced4da',
        borderRadius: '5px'
      }} />
          </div>
          <button type="submit" style={{ 
      background: '#0070f3',
      color: 'white',
      padding: '10px 20px',
      borderRadius: '5px',
      border: 'none',
      cursor: 'pointer',
      fontWeight: 'bold',
      fontSize: '16px',
      display: 'block',
      margin: '0 auto',
      width: '100%',
      maxWidth: '200px',
      textTransform: 'uppercase'
    }} >Register or Login</button>
        </form>
        <button onClick={handleLogin} style={{ 
  background: '#fff',
  color: '#333',
  padding: '10px 20px',
  borderRadius: '5px',
  border: '1px solid #ccc',
  cursor: 'pointer',
  marginTop: '10px',
  fontWeight: 'bold',
  fontSize: '16px',
  display: 'block',
  margin: '0 auto',
  width: '100%',
  maxWidth: '200px',
  textTransform: 'uppercase',
  backgroundImage: 'url("https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg")',
  backgroundPosition: 'left center',
  backgroundRepeat: 'no-repeat',
  paddingLeft: '40px',
  backgroundSize: '24px 24px'
}}>Sign in with Google</button>

      </div>

    

      { route==='reg' && <div style={{ 
        backgroundColor: 'white',
        padding: '20px',
        borderRadius: '5px',
        width: '400px'
      }}>
        <h2 style={{ 
          fontSize: '24px',
          marginBottom: '20px'
        }}>Register Student</h2>
        <form onSubmit={handleSubmitSignUp}>
          <div style={{ marginBottom: '10px' }}>
            <label htmlFor="name" style={{ marginRight: '10px' }}>Name:</label>
            <input type="text" id="name" value={name} onChange={(e) => setName(e.target.value)} />
          </div>
          <div style={{ marginBottom: '10px' }}>
            <label htmlFor="email" style={{ marginRight: '10px' }}>Email:</label>
            <input type="email" id="email" value={email} onChange={(e) => setEmail(e.target.value)} />
          </div>
          <div style={{ marginBottom: '20px' }}>
            <label htmlFor="password" style={{ marginRight: '10px' }}>Password:</label>
            <input type="password" id="password" value={password} onChange={(e) => setPassword(e.target.value)} />
          </div>
          <button type="submit" style={{ 
            background: '#0070f3',
            color: 'white',
            padding: '10px',
            borderRadius: '5px',
            border: 'none',
            cursor: 'pointer',
            fontWeight: 'bold',
            fontSize: '16px'
          }}>Register</button>
        </form>
      </div>}
    
    </div>
  );
};


export async function getServerSideProps(context) {
  let arrayofprojects=[]
 const db= getFirestore(app);
 const ref=collection(db,"AllProjects");
 const docRef= await getDocs(ref);
 docRef.forEach((doc) => { 
  // console.log(`${doc.id} => ${JSON.stringify(doc.data())}`); 
  arrayofprojects.push({id:doc.id ,data:doc.data()})
});
console.log(arrayofprojects)
  return {
    props: {
      arrayofprojects 
    },
  };
}